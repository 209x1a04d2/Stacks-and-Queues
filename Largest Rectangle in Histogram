class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        int[] leftSmall = new int[n];
        int[] rightSmall  = new int[n];
        Stack<Integer> st= new Stack<>();
        for(int i = 0;i<n;i++){
            while(st.isEmpty() == false && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty() == true) leftSmall[i] = 0;
            else{
                leftSmall[i] = st.peek()+1;
            }
            st.push(i);
        }
        while(st.isEmpty() == false) st.pop();
        for(int i = n-1;i>=0;i--){
            while(st.isEmpty() == false && heights[st.peek()] >= heights[i]){
                st.pop();
            }
            if(st.isEmpty() == true) rightSmall[i] = n-1;
            else
            rightSmall[i] = st.peek()-1;
            st.push(i);
        }
        int ans = Integer.MIN_VALUE;
        for(int i = 0;i<n;i++){
            ans = Math.max(ans,heights[i]*(rightSmall[i]-leftSmall[i]+1));
        }
        return ans;
    }
}
