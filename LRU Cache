class LRUCache {
    HashMap<Integer,Node> map = new HashMap<>();
    Node head = new Node(0,0);
    Node tail = new Node(0,0);
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.head.next=tail;
        this.tail.prev=head;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node = map.get(key);
            //int value = node.value;
            remove(node);
            insert(node);
            return node.value;
        }
        else
        return -1;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(map.size() == capacity){
            remove(tail.prev);
        }
        Node newNode = new Node(key,value);
        insert(newNode);
    }
    private void insert(Node node){
        map.put(node.key,node);
        node.next = head.next;
         node.next.prev = node;
         head.next = node;
        node.prev = head;
       
    }
    private void remove(Node node){
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev; 
    }
}
class Node{
    int key,value;
    Node next,prev;
    Node(int key,int value){
        this.key = key;
        this.value = value;
        this.next = null;
        this.prev = null;
    }
}
